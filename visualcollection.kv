#:import ButtonBehavior kivy.uix.behaviors.button.ButtonBehavior

#:set TEXT_COLOR (0.922, 0.941, 0.953, 1.0)
#:set BACKGROUND_COLOR (0.016, 0.020, 0.024, 1.0)
#:set PRIMARY_COLOR (0.675, 0.745, 0.800, 1.0)
#:set SECONDARY_COLOR (0.345, 0.251, 0.408, 1.0)
#:set ACCENT_COLOR (0.651, 0.463, 0.671, 1.0)
#:set CARD_BACKGROUND_COLOR (0.929, 0.953, 0.969, 0.05)

# Main application layout
<VisualCollectionApp>:
    MainLayout:

<Label>: # Style de base pour tous les Labels
    color: TEXT_COLOR

<TextInput>: # Style de base
    background_color: (0.05, 0.06, 0.07, 1) # Une couleur de fond légèrement différente
    color: TEXT_COLOR
    foreground_color: TEXT_COLOR
    cursor_color: ACCENT_COLOR
    #hint_text_color: (TEXT_COLOR[0], TEXT_COLOR[1], TEXT_COLOR[2], 0.5) # Texte d'aide semi-transparent
    padding: [dp(6), dp(10), dp(6), dp(10)] # [gauche, haut, droite, bas]

<Button>: # Style de base pour tous les Boutons
    color: (0,0,0,1)
    background_color: CARD_BACKGROUND_COLOR
    canvas.before:
        Color:
            rgba: PRIMARY_COLOR
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [dp(5)]

<Popup>: # Style de base pour tous les Popups
    title_color: PRIMARY_COLOR
    separator_color: ACCENT_COLOR
    background: '' # Nécessaire pour que background_color fonctionne
    background_color: BACKGROUND_COLOR # Couleur de fond du contenu du popup

    # Le contenu du popup est souvent un BoxLayout, vous pouvez le styler aussi
    BoxLayout: # Si votre popup contient directement un BoxLayout
        canvas.before:
            Color:
                rgba: BACKGROUND_COLOR # ou une nuance
            Rectangle:
                pos: self.pos
                size: self.size

<MainLayout>:
    orientation: 'vertical'
    padding: '10dp'
    spacing: '10dp'
    background_color: BACKGROUND_COLOR

    Button:
        text: "New Collection"
        size_hint_y: None
        height: '48dp'
        on_press: app.open_new_collection_popup()

    ScrollView:
        id: collection_scroll_view
        size_hint_y: 0.8
        do_scroll_x: False
        GridLayout:
            id: collections_grid
            cols: 5
            spacing: dp(10)
            padding: dp(10)
            size_hint_y: None 
            height: self.minimum_height 

<CollectionCard@ButtonBehavior+BoxLayout>:
    orientation: 'vertical'
    size_hint_y: None
    height: self.minimum_height
    padding: dp(5)
    spacing: dp(5)
    on_press: app.open_collection_folder(root.folder_path)
    canvas.before:
        Color:
            rgba: CARD_BACKGROUND_COLOR 
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [dp(12),] # Augmentation du rayon pour la carte

    RelativeLayout: # Conteneur pour l'image
        id: image_container 
        size_hint_y: None 
        height: self.width * (9/16) 

        AsyncImage:
            id: collection_image
            source: root.image_source if root.image_source else "assets/placeholder.png"
            allow_stretch: True
            keep_ratio: False 
            fit_mode: 'cover'
            size_hint: (1,1) 
            pos_hint: {'center_x': 0.5, 'center_y': 0.5} 
            canvas.before:
                StencilPush
                RoundedRectangle:
                    pos: self.pos
                    size: self.size
                    radius: [dp(6),] 
                StencilUse
            canvas.after:
                StencilUnUse
                StencilPop

    Label:
        text: root.collection_name
        size_hint_y: None 
        height: self.texture_size[1] + dp(10) 
        text_size: self.width - dp(10), None 
        halign: 'center'
        valign: 'middle'
        shorten: True
        shorten_from: 'right'

    GridLayout:
        id: tags_container
        size_hint_y: None
        height: self.minimum_height
        cols: 3  
        spacing: dp(4)
    

<NewCollectionPopup>:
    size_hint: 0.8, 0.9 # Adjusted for more content
    auto_dismiss: False # User must explicitly close
    title: "Create New Collection" # Title for the popup window

    BoxLayout:
        orientation: 'vertical'
        padding: '10dp'
        spacing: '10dp'

        Label:
            text: root.title # Display the title
            font_size: '20sp'
            size_hint_y: None
            height: self.texture_size[1] + dp(10)
            halign: 'center'

        GridLayout:
            cols: 2
            spacing: ['10dp', '45dp'] # Increased vertical spacing
            size_hint_y: None
            height: self.minimum_height

            Label:
                text: "Name:"
                size_hint_x: None
                width: '100dp'
            TextInput:
                id: collection_name_input
                hint_text: "Collection name"
                multiline: False
                size_hint_x: 1  # Make the button fill the horizontal space of its grid cell
                size_hint_y: None # If you want to set a fixed height
                height: '48dp'   # Example fixed height
                hint_text: "Enter collection name" # Optional: placeholder text

            Button:
                text: "Select Folder..."
                on_press: app.open_folder_chooser_popup()
                size_hint_x: 1  # Make the button fill the horizontal space of its grid cell
                size_hint_y: None # If you want to set a fixed height
                height: '48dp'   # Example fixed height

            Label: # To display the selected folder path
                id: selected_folder_label
                text: "No folder selected"
                size_hint_y: None
                height: self.texture_size[1]

            Button:
                id: image_button # Ensure this ID exists or is consistent
                text: "Select Image..."
                on_press: app.open_image_chooser_popup() # New app method
                size_hint_x: 1
                size_hint_y: None
                height: '48dp'

            Image:
                id: image_preview
                source: "assets/placeholder_popup.png"
                size_hint: (1, None)
                height: '56dp' # Adjust preview height to 16:9
                allow_stretch: True
                keep_ratio: True
                fit_mode: "contain"
            

            Button:
                id: tags_button # This ID is used in main.py
                text: "Select Tags" # Initial text
                size_hint_x: 1
                size_hint_y: None
                height: '48dp'
                # The on_press is now handled in Python by binding to tags_dropdown.open

        ScrollView: # In case content overflows
            BoxLayout:
                id: form_content # We might add more dynamic fields here
                orientation: 'vertical'
                size_hint_y: None
                height: self.minimum_height
                spacing: '5dp'

        BoxLayout: # For bottom buttons
            size_hint_y: None
            height: '48dp'
            spacing: '10dp'
            Button:
                text: "Cancel"
                on_press: root.dismiss() # root refers to NewCollectionPopup
            Button:
                text: "Save"
                on_press: app.save_collection(root.ids.collection_name_input.text, root) # Pass popup instance



# Popup for choosing a folder
<FolderChooserPopup>:
    size_hint: 0.9, 0.9
    auto_dismiss: False
    title: "Select a Folder"

    BoxLayout:
        orientation: 'vertical'
        padding: '10dp'
        spacing: '10dp'

        Label:
            text: root.title
            font_size: '20sp'
            size_hint_y: None
            height: self.texture_size[1] + dp(10)
            halign: 'center'

        FileChooserListView:
            id: filechooser
            dirselect: True  
            path: "E://"  
            #on_selection: app.select_folder(filechooser.selection)


        BoxLayout:
            size_hint_y: None
            height: '48dp'
            spacing: '10dp'
            Button:
                text: "Cancel"
                on_press: root.dismiss()
            Button:
                text: "Select"
                on_release: app.confirm_folder_selection(filechooser.selection)

# Popup for choosing an image file
<ImageChooserPopup@ModalView>:
    size_hint: 0.9, 0.9
    auto_dismiss: False
    title: "Select an Image"

    BoxLayout:
        orientation: 'vertical'
        FileChooserIconView:
            id: imagefilechooser
            path: './' 
            filters: ["*.png", "*.jpg", "*.jpeg", "*.gif", "*.bmp"] 
        BoxLayout:
            size_hint_y: None
            height: '48dp'
            Button:
                text: "Cancel"
                on_press: root.dismiss()
            Button:
                text: "Select Image"
                on_press: app.select_image(imagefilechooser.selection, root)

# Popup for creating a new tag
<NewTagPopup>:
    size_hint: 0.6, 0.4
    auto_dismiss: False
    title: "Add New Tag"

    BoxLayout:
        orientation: 'vertical'
        padding: '10dp'
        spacing: '10dp'

        Label:
            text: "Enter a name for the new tag:"
            size_hint_y: None
            height: self.texture_size[1]

        TextInput:
            id: new_tag_name_input
            hint_text: "Tag name"
            multiline: False
            size_hint_y: None
            height: '40dp'
            on_text_validate: app.save_new_tag_from_popup(self.text, root) 

        Label: 
            id: new_tag_feedback_label
            text: "" 
            size_hint_y: None
            height: self.texture_size[1]
            color: (1,0,0,1) 

        BoxLayout:
            size_hint_y: None
            height: '48dp'
            spacing: '10dp'
            Button:
                text: "Cancel"
                on_press: root.dismiss()
            Button:
                text: "Save Tag"
                on_press: app.save_new_tag_from_popup(new_tag_name_input.text, root)